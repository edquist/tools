#!/usr/bin/python

"""
Usage:
  {script} [3.X|upcoming]  [elY]  [development|testing|release]
Or:
  {script} [devops]        [elY]  [itb|production]

Default is:
  {series} el{el} {tag}

Options:
  --[no-]color     colorize version differences (default = True if tty)
  --html           generate html output (implies --color)
  --preamble=text  print some preamble text before the report
  --show-all       show versions even for non-outdated packages
"""

import outdated_pkgs_diff
import epel_pkgs
import osg_pkgs

import sys
import os
import re


class Options(outdated_pkgs_diff.Options):
    series     = '3.5'
    el         = '7'
    tag        = 'release'
    tag_fmt    = "osg-{series}-el{el}-{tag}"

    def _asdict(o):
        return { k: getattr(o,k) for k in dir(o) if not k.startswith('_') }

def usage(ops):
    script = os.path.basename(__file__)
    print __doc__.format(script=script, **ops._asdict())
    sys.exit()


def is_el(arg):
    return re.search(r'^el[5-9]$', arg)

def is_series(arg):
    return re.search(r'^[3-9]\.[0-9]$', arg) or arg in ('devops', 'upcoming')

def is_tag(arg):
    return arg in ('development', 'testing', 'release', 'itb', 'production')

def is_preamble(arg):
    return arg.startswith('--preamble=')

def get_preamble(arg):
    return arg[len('--preamble='):]


def parseargs(args):
    ops = Options()
    for arg in args:
        if   is_el(arg)          : ops.el        = arg[2]
        elif is_series(arg)      : ops.series    = arg
        elif is_tag(arg)         : ops.tag       = arg
        elif is_preamble(arg)    : ops.preamble  = get_preamble(arg)
        elif arg == '--show-all' : ops.show_all  = True
        elif arg == '--color'    : ops.use_color = True
        elif arg == '--no-color' : ops.use_color = False
        elif arg == '--html'     : ops.use_color = ops.html_out = True
        else                     : usage(ops)

    if ops.series == 'devops':
        ops.tag_fmt = "{series}-el{el}-{tag}"
        if ops.tag == 'release':
            ops.tag = 'production'

    ops.osg_tag = ops.tag_fmt.format(**ops._asdict())

    return ops


def main(args):
    ops = parseargs(args)

    epel_list     = epel_pkgs.get_epel_list(ops.el)
    epel_label    = "EPEL " + ops.el
    epel_dist_pfx = 'el' + ops.el

    osg_list      = osg_pkgs.get_osg_list(ops.osg_tag)
    osg_label     = "OSG " + ops.series.capitalize()
    osg_dist_pfx  = 'osg'

    upstream   = epel_list, epel_label, epel_dist_pfx
    downstream = osg_list,  osg_label,  osg_dist_pfx

    outdated_pkgs_diff.main(downstream, upstream, ops)


if __name__ == '__main__':
    main(sys.argv[1:])

